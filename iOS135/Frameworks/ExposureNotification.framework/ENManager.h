/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/ExposureNotification.framework/ExposureNotification
 */

@interface ENManager : NSObject {
    bool  _activateCalled;
    unsigned int  _clientID;
    ENExposureDetectionClientSession * _detectionSession;
    NSObject<OS_dispatch_queue> * _dispatchQueue;
    bool  _exposureNotificationEnabled;
    long long  _exposureNotificationStatus;
    bool  _invalidateCalled;
    bool  _invalidateDone;
    id /* block */  _invalidationHandler;
    bool  _isTestEntitlement;
    id /* block */  _statusChangedHandler;
    NSObject<OS_xpc_object> * _testListenerEndpoint;
    NSObject<OS_xpc_object> * _xpcCnx;
}

@property (nonatomic) unsigned int clientID;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (nonatomic, readonly) bool exposureNotificationEnabled;
@property (nonatomic, readonly) long long exposureNotificationStatus;
@property (nonatomic, copy) id /* block */ invalidationHandler;
@property (nonatomic, copy) id /* block */ statusChangedHandler;
@property (nonatomic, retain) NSObject<OS_xpc_object> *testListenerEndpoint;

+ (long long)authorizationStatus;

- (void).cxx_destruct;
- (void)_activateWithCompletionHandler:(id /* block */)arg1;
- (id)_ensureXPCStarted;
- (void)_entitlementCheckUpdate:(id)arg1;
- (void)_entitlementCheckWithCompletion:(id /* block */)arg1;
- (void)_getDiagnosisKeysReply:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_getExposureInfoCompleted:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_interrupted;
- (void)_invalidate;
- (void)_invalidated;
- (void)_reactivate;
- (void)_tccCheckWithCompletion:(id /* block */)arg1;
- (void)_xpcHandleStatusChanged:(id)arg1 initial:(bool)arg2;
- (void)_xpcReceivedEvent:(id)arg1;
- (void)_xpcReceivedMessage:(id)arg1;
- (void)activateWithCompletionHandler:(id /* block */)arg1;
- (unsigned int)clientID;
- (void)currentRegionIDWithCompletion:(id /* block */)arg1;
- (void)currentServerConfigurationWithCompletion:(id /* block */)arg1;
- (void)dealloc;
- (void)deleteExposureDetectionHistoryWithCompletionHandler:(id /* block */)arg1;
- (id)description;
- (id)descriptionWithLevel:(int)arg1;
- (id)detectExposuresWithConfiguration:(id)arg1 diagnosisKeyURLs:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)diagnosticControl:(id)arg1 completion:(id /* block */)arg2;
- (void)diagnosticShow:(id)arg1 completion:(id /* block */)arg2;
- (id)dispatchQueue;
- (void)exposureDetectionActivate:(id)arg1 completion:(id /* block */)arg2;
- (void)exposureDetectionAddKeys:(id)arg1 completion:(id /* block */)arg2;
- (void)exposureDetectionFileActivate:(id)arg1 completion:(id /* block */)arg2;
- (void)exposureDetectionFileAdd:(id)arg1 signatureURL:(id)arg2 completion:(id /* block */)arg3;
- (void)exposureDetectionFileFinishWithCompletion:(id /* block */)arg1;
- (void)exposureDetectionFinishWithCompletion:(id /* block */)arg1;
- (void)exposureDetectionGetExposureInfoCompleted:(id)arg1 completion:(id /* block */)arg2;
- (void)exposureDetectionGetExposureInfoWithMaximumCount:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (bool)exposureNotificationEnabled;
- (void)exposureNotificationGetStatusForBundleIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (long long)exposureNotificationStatus;
- (void)getDiagnosisKeysWithCompletionHandler:(id /* block */)arg1;
- (id)getExposureInfoFromSummary:(id)arg1 userExplanation:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)getInfoForKey:(id)arg1 completion:(id /* block */)arg2;
- (void)getTestDiagnosisKeysWithCompletionHandler:(id /* block */)arg1;
- (id)init;
- (void)invalidate;
- (id /* block */)invalidationHandler;
- (void)resetAllDataWithCompletionHandler:(id /* block */)arg1;
- (void)setClientID:(unsigned int)arg1;
- (void)setCurrentActiveApp:(id)arg1 completion:(id /* block */)arg2;
- (void)setDispatchQueue:(id)arg1;
- (void)setExposureNotificationEnabled:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)setInvalidationHandler:(id /* block */)arg1;
- (void)setStatusChangedHandler:(id /* block */)arg1;
- (void)setTestListenerEndpoint:(id)arg1;
- (void)setWeeklyNotificationTrigger:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (id /* block */)statusChangedHandler;
- (id)testListenerEndpoint;

@end
